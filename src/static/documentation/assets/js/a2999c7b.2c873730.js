"use strict";(self.webpackChunkchicago_crashes_pipeline_docs=self.webpackChunkchicago_crashes_pipeline_docs||[]).push([[167],{225:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>d,metadata:()=>n,toc:()=>a});const n=JSON.parse('{"id":"development/testing","title":"Testing & Quality","description":"Testing strategy, fixtures, and coverage expectations.","source":"@site/docs/development/testing.md","sourceDirName":"development","slug":"/development/testing","permalink":"/documentation/development/testing","draft":false,"unlisted":false,"editUrl":"https://github.com/MisterClean/chicago-crashes-pipeline/tree/main/docs/development/testing.md","tags":[],"version":"current","lastUpdatedAt":null,"sidebarPosition":2,"frontMatter":{"title":"Testing & Quality","sidebar_position":2,"description":"Testing strategy, fixtures, and coverage expectations."},"sidebar":"guideSidebar","previous":{"title":"Development Environment","permalink":"/documentation/development/environment"},"next":{"title":"Contributing","permalink":"/documentation/development/contributing"}}');var i=s(4848),r=s(8453);const d={title:"Testing & Quality",sidebar_position:2,description:"Testing strategy, fixtures, and coverage expectations."},c=void 0,o={},a=[{value:"Testing Strategy",id:"testing-strategy",level:2},{value:"Fixtures",id:"fixtures",level:2},{value:"Coverage Targets",id:"coverage-targets",level:2},{value:"Running Tests",id:"running-tests",level:2},{value:"Test Data",id:"test-data",level:2},{value:"Linting &amp; Type Checking",id:"linting--type-checking",level:2},{value:"Testing the Admin Portal",id:"testing-the-admin-portal",level:2}];function l(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"testing-strategy",children:"Testing Strategy"}),"\n",(0,i.jsxs)(t.p,{children:["The project uses ",(0,i.jsx)(t.a,{href:"https://docs.pytest.org/",children:"pytest"})," for unit and integration tests with SQLAlchemy-backed fixtures."]}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Layer"}),(0,i.jsx)(t.th,{children:"Examples"}),(0,i.jsx)(t.th,{children:"Notes"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Pure functions"}),(0,i.jsx)(t.td,{children:"Validators, utilities"}),(0,i.jsx)(t.td,{children:"Aim for deterministic, side-effect free tests"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Service layer"}),(0,i.jsxs)(t.td,{children:[(0,i.jsx)(t.code,{children:"SyncService"}),", ",(0,i.jsx)(t.code,{children:"JobService"})]}),(0,i.jsx)(t.td,{children:"Mock external dependencies (SODA API, Redis) using pytest fixtures"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"API routers"}),(0,i.jsxs)(t.td,{children:["FastAPI ",(0,i.jsx)(t.code,{children:"TestClient"})," assertions"]}),(0,i.jsx)(t.td,{children:"Validate status codes, schemas, and background task behaviour"})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"fixtures",children:"Fixtures"}),"\n",(0,i.jsxs)(t.p,{children:["Key fixtures live in ",(0,i.jsx)(t.code,{children:"tests/conftest.py"}),":"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"session"})," / ",(0,i.jsx)(t.code,{children:"db_engine"})," \u2013 create isolated in-memory or temporary PostgreSQL databases."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"test_client"})," \u2013 FastAPI client with dependency overrides for external services."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"soda_responses"})," \u2013 stubbed SODA API payloads for deterministic sync tests."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Reuse these fixtures to avoid brittle setup code in individual tests."}),"\n",(0,i.jsx)(t.h2,{id:"coverage-targets",children:"Coverage Targets"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Maintain ",(0,i.jsx)(t.strong,{children:"80%+"})," line coverage for critical modules (",(0,i.jsx)(t.code,{children:"src/services"}),", ",(0,i.jsx)(t.code,{children:"src/api/routers"}),", ",(0,i.jsx)(t.code,{children:"src/validators"}),")."]}),"\n",(0,i.jsx)(t.li,{children:"Ensure each new feature includes corresponding tests. For regressions, add tests that fail without the fix."}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"running-tests",children:"Running Tests"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"# Base run\npytest tests -v\n\n# With coverage report\npytest tests --cov=src --cov-report=term-missing\n\n# Run a single test case\npytest tests/services/test_job_service.py::test_create_job\n"})}),"\n",(0,i.jsx)(t.h2,{id:"test-data",children:"Test Data"}),"\n",(0,i.jsxs)(t.p,{children:["Large fixtures (crash samples, people, vehicles) reside in ",(0,i.jsx)(t.code,{children:"tests/fixtures/"}),". Keep them small and anonymised. For new datasets, prefer synthesised JSON snippets rather than copying full records."]}),"\n",(0,i.jsx)(t.h2,{id:"linting--type-checking",children:"Linting & Type Checking"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"flake8 src tests\nmypy src\n"})}),"\n",(0,i.jsxs)(t.p,{children:["CI should fail on lint violations or type errors. When type stubs are missing for third-party libraries, annotate ",(0,i.jsx)(t.code,{children:"# type: ignore[import]"})," and leave a TODO to replace with proper typing later."]}),"\n",(0,i.jsx)(t.h2,{id:"testing-the-admin-portal",children:"Testing the Admin Portal"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Use Playwright or Cypress for end-to-end smoke tests if UI coverage is required."}),"\n",(0,i.jsxs)(t.li,{children:["For quick manual tests, run ",(0,i.jsx)(t.code,{children:"npm install && npm run start"})," inside the docs site to preview documentation changes alongside the API."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Document notable edge cases uncovered during testing so they can be promoted to automated coverage."})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>d,x:()=>c});var n=s(6540);const i={},r=n.createContext(i);function d(e){const t=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);