"use strict";(self.webpackChunkchicago_crashes_pipeline_docs=self.webpackChunkchicago_crashes_pipeline_docs||[]).push([[131],{5936:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"development/environment","title":"Development Environment","description":"Set up tooling and workflows for contributing to the pipeline.","source":"@site/docs/development/environment.md","sourceDirName":"development","slug":"/development/environment","permalink":"/documentation/development/environment","draft":false,"unlisted":false,"editUrl":"https://github.com/MisterClean/chicago-crashes-pipeline/tree/main/docs/development/environment.md","tags":[],"version":"current","lastUpdatedAt":null,"sidebarPosition":1,"frontMatter":{"title":"Development Environment","sidebar_position":1,"description":"Set up tooling and workflows for contributing to the pipeline."},"sidebar":"guideSidebar","previous":{"title":"Troubleshooting","permalink":"/documentation/operations/troubleshooting"},"next":{"title":"Testing & Quality","permalink":"/documentation/development/testing"}}');var i=t(4848),r=t(8453);const o={title:"Development Environment",sidebar_position:1,description:"Set up tooling and workflows for contributing to the pipeline."},l=void 0,c={},d=[{value:"Requirements",id:"requirements",level:2},{value:"Setup Steps",id:"setup-steps",level:2},{value:"Project Layout",id:"project-layout",level:2},{value:"Useful Make Targets",id:"useful-make-targets",level:2},{value:"Code Style",id:"code-style",level:2},{value:"Testing",id:"testing",level:2},{value:"Pre-Commit / CI",id:"pre-commit--ci",level:2}];function a(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Python ",(0,i.jsx)(n.strong,{children:"3.11"})," (the codebase targets 3.11 locally and in Docker)"]}),"\n",(0,i.jsxs)(n.li,{children:["PostgreSQL ",(0,i.jsx)(n.strong,{children:"15"})," with PostGIS if running services outside Docker"]}),"\n",(0,i.jsxs)(n.li,{children:["Redis ",(0,i.jsx)(n.strong,{children:"7"})," (Docker or local)"]}),"\n",(0,i.jsxs)(n.li,{children:["Node.js ",(0,i.jsx)(n.strong,{children:"18+"})," if you plan to work on the Docusaurus documentation site"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"setup-steps",children:"Setup Steps"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/MisterClean/chicago-crashes-pipeline.git\ncd chicago-crashes-pipeline\npython3 -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\npip install -r requirements-dev.txt  # optional, for extra tooling\ncp .env.example .env\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"make dev-install"})," to install the project in editable mode along with base dependencies."]}),"\n",(0,i.jsx)(n.h2,{id:"project-layout",children:"Project Layout"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"chicago-crashes-pipeline/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 api/                 # FastAPI app, routers, dependencies\n\u2502   \u251c\u2500\u2500 cli/                 # Command-line entry points\n\u2502   \u251c\u2500\u2500 etl/                 # SODA client and ingestion helpers\n\u2502   \u251c\u2500\u2500 models/              # SQLAlchemy models\n\u2502   \u251c\u2500\u2500 services/            # Business logic (sync, jobs, spatial layers)\n\u2502   \u251c\u2500\u2500 static/admin/        # Admin portal assets\n\u2502   \u251c\u2500\u2500 utils/               # Config, logging, helpers\n\u2502   \u2514\u2500\u2500 validators/          # Data sanitisation and validation rules\n\u251c\u2500\u2500 config/config.yaml       # Application configuration defaults\n\u251c\u2500\u2500 docker/                  # Dockerfile, Compose stack, init SQL\n\u251c\u2500\u2500 docs/                    # Docusaurus documentation content\n\u251c\u2500\u2500 tests/                   # Pytest suite\n\u2514\u2500\u2500 Makefile                 # Convenience commands\n"})}),"\n",(0,i.jsx)(n.h2,{id:"useful-make-targets",children:"Useful Make Targets"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Target"}),(0,i.jsx)(n.th,{children:"Action"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"make test"})}),(0,i.jsx)(n.td,{children:"Run pytest with coverage report"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"make lint"})}),(0,i.jsx)(n.td,{children:"Run flake8 + mypy"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"make format"})}),(0,i.jsx)(n.td,{children:"Apply Black and isort"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"make sync"})}),(0,i.jsx)(n.td,{children:"Execute a rolling delta sync via CLI"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"make load-shapefiles"})}),(0,i.jsxs)(n.td,{children:["Import shapefiles listed in ",(0,i.jsx)(n.code,{children:"config/config.yaml"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"make serve"})}),(0,i.jsx)(n.td,{children:"Launch the API with auto-reload"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"code-style",children:"Code Style"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Format with ",(0,i.jsx)(n.strong,{children:"Black"})," (",(0,i.jsx)(n.code,{children:"black src tests"}),") and ",(0,i.jsx)(n.strong,{children:"isort"})," for imports."]}),"\n",(0,i.jsxs)(n.li,{children:["Follow ",(0,i.jsx)(n.strong,{children:"PEP 8"})," plus type hints on public functions."]}),"\n",(0,i.jsx)(n.li,{children:"Prefer dependency injection via FastAPI routers to keep modules testable."}),"\n",(0,i.jsxs)(n.li,{children:["Use structured logging (",(0,i.jsx)(n.code,{children:"get_logger(__name__)"}),") with contextual keyword arguments."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Run full suite\npytest tests -v\n\n# Focus on a single module\npytest tests/api/test_sync_router.py -k "trigger"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Integration tests expect a PostgreSQL instance. For isolated runs, leverage pytest fixtures under ",(0,i.jsx)(n.code,{children:"tests/conftest.py"})," that spin up temporary databases using SQLAlchemy."]}),"\n",(0,i.jsx)(n.h2,{id:"pre-commit--ci",children:"Pre-Commit / CI"}),"\n",(0,i.jsx)(n.p,{children:"Set up a pre-commit hook to mirror CI checks:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"pip install pre-commit\npre-commit install\npre-commit run --all-files\n"})}),"\n",(0,i.jsxs)(n.p,{children:["CI pipelines should run ",(0,i.jsx)(n.code,{children:"make lint"}),", ",(0,i.jsx)(n.code,{children:"make test"}),", and the Docusaurus build (",(0,i.jsx)(n.code,{children:"npm run build"}),") to catch issues early."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var s=t(6540);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);