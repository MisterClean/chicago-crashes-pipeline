"use strict";(self.webpackChunkchicago_crashes_pipeline_docs=self.webpackChunkchicago_crashes_pipeline_docs||[]).push([[372],{2256:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"user-guides/admin-portal","title":"Admin Portal","description":"Operate and monitor the pipeline through the built-in admin portal.","source":"@site/docs/user-guides/admin-portal.md","sourceDirName":"user-guides","slug":"/user-guides/admin-portal","permalink":"/documentation/user-guides/admin-portal","draft":false,"unlisted":false,"editUrl":"https://github.com/MisterClean/chicago-crashes-pipeline/tree/main/docs/user-guides/admin-portal.md","tags":[],"version":"current","lastUpdatedAt":null,"sidebarPosition":1,"frontMatter":{"title":"Admin Portal","sidebar_position":1,"description":"Operate and monitor the pipeline through the built-in admin portal."},"sidebar":"guideSidebar","previous":{"title":"Docker Compose","permalink":"/documentation/getting-started/docker-compose"},"next":{"title":"API Reference","permalink":"/documentation/user-guides/api-reference"}}');var i=s(4848),r=s(8453);const o={title:"Admin Portal",sidebar_position:1,description:"Operate and monitor the pipeline through the built-in admin portal."},a=void 0,l={},d=[{value:"Dashboard",id:"dashboard",level:2},{value:"Scheduled Jobs",id:"scheduled-jobs",level:2},{value:"Execution History",id:"execution-history",level:2},{value:"Data Management",id:"data-management",level:2},{value:"Spatial Layers",id:"spatial-layers",level:2},{value:"Tips",id:"tips",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["The admin portal is a single-page application served from ",(0,i.jsx)(n.code,{children:"/admin"})," by the FastAPI service. It provides live visibility into scheduled jobs, execution history, data volumes, and spatial assets."]}),"\n",(0,i.jsx)(n.p,{children:"Access the portal after starting the API:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"http://localhost:8000/admin\n"})}),"\n",(0,i.jsx)(n.h2,{id:"dashboard",children:"Dashboard"}),"\n",(0,i.jsx)(n.p,{children:"The landing view surfaces real-time metrics pulled from the REST API:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Total Jobs / Active Jobs"})," \u2013 counts from ",(0,i.jsx)(n.code,{children:"GET /jobs/summary"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Running Jobs"})," \u2013 active executions reported by the scheduler."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Failed Jobs (24h)"})," \u2013 execution failures recorded during the last day."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Quick Actions"})," \u2013 buttons that trigger the default sync jobs (e.g., ",(0,i.jsx)(n.code,{children:"full_refresh"}),", ",(0,i.jsx)(n.code,{children:"last_30_days_crashes"}),"). These map to the job type identifiers defined in ",(0,i.jsx)(n.code,{children:"src/models/jobs.py"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Recent Activity"})," \u2013 rolling feed of the last ten executions with status, record counts, and timestamps."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Use the toolbar refresh button or enable auto-refresh (30 second interval) to keep data current."}),"\n",(0,i.jsx)(n.h2,{id:"scheduled-jobs",children:"Scheduled Jobs"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"Scheduled Jobs"})," tab lists every entry in the ",(0,i.jsx)(n.code,{children:"scheduled_jobs"})," table."]}),"\n",(0,i.jsx)(n.p,{children:"Capabilities:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Create Job"})," \u2013 launches a modal to configure job type, recurrence (once/daily/weekly/cron), endpoints, and execution window. Jobs default to enabled with calculated ",(0,i.jsx)(n.code,{children:"next_run"})," when the recurrence is not ",(0,i.jsx)(n.code,{children:"once"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Enable / Disable"})," \u2013 toggle the ",(0,i.jsx)(n.code,{children:"enabled"})," flag for any job."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Execute Now"})," \u2013 initiates an immediate run via ",(0,i.jsx)(n.code,{children:"POST /jobs/{id}/execute"})," (uses the same background task pipeline as scheduled runs)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Edit"})," \u2013 update recurrence, timeout, retry policy, or endpoint configuration."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Delete"})," \u2013 removes the job and associated execution history."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Filter the jobs table with the \u201cEnabled only\u201d switch to focus on active schedules."}),"\n",(0,i.jsx)(n.h2,{id:"execution-history",children:"Execution History"}),"\n",(0,i.jsxs)(n.p,{children:["Select ",(0,i.jsx)(n.strong,{children:"Execution History"})," to inspect past runs:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Filters"})," \u2013 narrow by job or status (running, completed, failed)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Details Drawer"})," \u2013 clicking a row opens a modal with logs, per-endpoint statistics, retry counts, and timestamps. Live executions poll ",(0,i.jsx)(n.code,{children:"/jobs/executions/{execution_id}"})," every five seconds until completion."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Download Logs"})," \u2013 copy structured log entries for further analysis."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"data-management",children:"Data Management"}),"\n",(0,i.jsxs)(n.p,{children:["The data management tab interacts with helper endpoints in ",(0,i.jsx)(n.code,{children:"src/api/routers/sync.py"})," and ",(0,i.jsx)(n.code,{children:"src/api/routers/jobs.py"}),"."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Record Counts"})," \u2013 ",(0,i.jsx)(n.code,{children:"GET /sync/counts"})," summarises table totals for quick validation after syncs."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Data Deletion"})," \u2013 submit a scoped deletion request (table + optional date range) to purge data. The UI enforces a confirmation checkbox and calls ",(0,i.jsx)(n.code,{children:"POST /jobs/data/delete"})," to ensure deletions are logged."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Health Indicators"})," \u2013 badges reflect responses from ",(0,i.jsx)(n.code,{children:"GET /health"})," and database connectivity checks."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"spatial-layers",children:"Spatial Layers"}),"\n",(0,i.jsxs)(n.p,{children:["Spatial content is managed via the ",(0,i.jsx)(n.code,{children:"SpatialLayerService"})," and ",(0,i.jsx)(n.code,{children:"/spatial/layers"})," endpoints."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Upload GeoJSON"})," \u2013 drag-and-drop files (or use the upload modal) to create new layers. Files are stored in the database with metadata and SRID 4326 by default."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Activate / Deactivate"})," \u2013 control layer visibility for downstream consumers by toggling the ",(0,i.jsx)(n.code,{children:"is_active"})," flag."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Replace Geometry"})," \u2013 upload a replacement GeoJSON for an existing layer without changing its ID."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Delete Layers"})," \u2013 remove obsolete assets with a single click."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Shapefile ingestion through ",(0,i.jsx)(n.code,{children:"POST /spatial/load"})," remains available for bulk loading of official boundary datasets (see ",(0,i.jsx)(n.a,{href:"/documentation/operations/operations-overview#spatial-assets",children:"Spatial Operations"}),")."]}),"\n",(0,i.jsx)(n.h2,{id:"tips",children:"Tips"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The portal gauges API connectivity and surfaces errors via toast notifications; investigate the browser console for stack traces during debugging."}),"\n",(0,i.jsx)(n.li,{children:"Permissions are currently open. Place the admin portal behind authentication or a VPN when deploying to shared environments."}),"\n",(0,i.jsx)(n.li,{children:"Pair the portal with external monitoring (Prometheus, Grafana, etc.) to capture infrastructure-level metrics such as database load or queue depth."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var t=s(6540);const i={},r=t.createContext(i);function o(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);